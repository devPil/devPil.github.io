{"data":{"site":{"siteMetadata":{"title":"Pil Developer Diary","author":"LEE PIL JU","labels":[{"tag":"algorithm","tech":"Algorithm","name":"DiCode","size":20,"color":"deepskyblue"},{"tag":"react","tech":"React","name":"DiReact","size":20,"color":"deepskyblue"},{"tag":"nodejs","tech":"Node.js","name":"DiNodejsSmall","size":20,"color":"lightgreen"},{"tag":"git","tech":"Git","name":"DiGitMerge","size":20,"color":"white"},{"tag":"javascript","tech":"JavaScript","name":"DiJsBadge","size":20,"color":"yellow"},{"tag":"css","tech":"CSS","name":"DiCss3Full","size":20,"color":"teal"},{"tag":"python","tech":"Python","name":"DiPython","size":20,"color":"deepskyblue"},{"tag":"ruby","tech":"Ruby","name":"DiRuby","size":20,"color":"crimson"},{"tag":"java","tech":"Java","name":"FaJava","size":20,"color":"wheat"},{"tag":"angular","tech":"Angular","name":"DiAngularSimple","size":20,"color":"red"},{"tag":"html","tech":"HTML","name":"FaHtml5","size":20,"color":"darkorange"},{"tag":"php","tech":"php","name":"DiPhp","size":20,"color":"violet"},{"tag":"mongodb","tech":"MongoDB","name":"DiMongodb","size":20,"color":"green"},{"tag":"vscode","tech":"VS Code","name":"DiVisualstudio","size":20,"color":"deepskyblue"}]}},"allMarkdownRemark":{"totalCount":6,"edges":[{"node":{"excerpt":"출처: 프로그래머스 N으로 표현먼저 규칙을 찾아보려고 하였다.문제를 보다 보니 number에 N을 곱한 뒤에 연산을 하면 나올 것 같았다.하지만 다른 숫자들의 규칙을 찾지 못하였고, 결국 모든 경우의 수를 모두 저장하여, 찾기로 하였다.  가장 먼저 각각의 연산에 관한 함수를 만들어 보자.  다음으로 solution…","html":"<p><br>\n출처: <a href=\"https://programmers.co.kr/learn/courses/30/lessons/42895?language=javascript\">프로그래머스 N으로 표현</a></p>\n<p>먼저 규칙을 찾아보려고 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">12 = 5+5 + (5/5) + (5/5)\n12 = 55/5+5/5\n12 = (55/+5)/5</code></pre></div>\n<p>문제를 보다 보니 number에 N을 곱한 뒤에 연산을 하면 나올 것 같았다.<br>\n하지만 다른 숫자들의 규칙을 찾지 못하였고, 결국 모든 경우의 수를 모두 저장하여, 찾기로 하였다.  </p>\n<p>가장 먼저 각각의 연산에 관한 함수를 만들어 보자.  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">N2</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token operator\">+</span><span class=\"token constant\">N2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sub</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">N2</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token operator\">-</span><span class=\"token constant\">N2</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">N</span> <span class=\"token operator\">-</span> <span class=\"token constant\">N2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mul</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">N2</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token operator\">*</span><span class=\"token constant\">N2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">div</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">N2</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">N</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token operator\">/</span><span class=\"token constant\">N2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">strN</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> count</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">+=</span> <span class=\"token string\">''</span><span class=\"token operator\">+</span><span class=\"token constant\">N</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음으로 <strong>solution</strong> 함수에 각각의 경우의 수를 저장할 <strong>list</strong>와 중복검사를 편하게 하기 위한 <strong>dup</strong> 배열을 만들도록 하자.<br>\n추가로, N과 number가 범위가 다를 경우 -1을 리턴 해주는 조건도 추가하도록 하자.  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> dup <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">N</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token constant\">N</span> <span class=\"token operator\">></span> <span class=\"token number\">9</span> <span class=\"token operator\">||</span> number <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> number <span class=\"token operator\">></span> <span class=\"token number\">32000</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>배열과 중복검사를 위한 배열 안에 요소를 추가하는 함수를 만들어 주도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pushItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">number<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> dup<span class=\"token punctuation\">,</span> list</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dup<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dup<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> number<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>최솟값이 8보다 크면 -1을 리턴하기 때문에 반복문을 8 이하로 돌리도록 하자.\n각각의 <strong>list[i]</strong> 안의 경우의 수를 넣어 주도록 하자.</p>\n<p><strong>middle</strong>라는 변수는 중복된 경우를 빼기 위해 사용하였다.\n각각의 숫자를 만들 수 있는 경우의 수는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1: 1\n2: 1+1\n3: 2+1\n4: 3+1, 2+2\n5: 4+1, 3+2\n6: 5+1, 4+2, 3+3\n7: 6+1, 5+2, 4+3\n8: 7+1, 6+2, 5+3, 4+4</code></pre></div>\n<p>즉, 5를 4번 사용할 경우: (1번, 3번), (2번, 2번), (3번, 1번) 총 3가지의 경우가 있을 수 있다.\n요기서 (1번, 3번)과 (3번, 1번)은 같은 경우이기 때문에 하나는 빼주기 위함이다.</p>\n<p><strong>strN</strong>함수의 경우 먼저 push를 해 주는 이유는\n예를 들어 2: [55, 10, 1, 0]의 4가지의 경우가 있다.\n하지만 strN을 잘못 할 경우, 3: [555, 105, 15, 05, ....]와 같이 잘못된 숫자가 들어가는 경우가 발생하기 때문이다.</p>\n<p>반복문을 진행하며, true가 나올 경우 반복문을 즉시 종료하도록 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/some\">Array.prototype.some()</a> 라는 함수를 사용하도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> dup <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">N</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token constant\">N</span> <span class=\"token operator\">></span> <span class=\"token number\">9</span> <span class=\"token operator\">||</span> number <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> number <span class=\"token operator\">></span> <span class=\"token number\">32000</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> middle <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pushItem</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span> <span class=\"token function\">strN</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dup<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            answer <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> middle <span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">kItem</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">const</span> tempItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">div</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> kItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> kItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> kItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> kItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> tempItems<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tempItem</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pushItem</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span> tempItem<span class=\"token punctuation\">,</span> dup<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            answer <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>answer <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>answer <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>전체 코드는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">N2</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token operator\">+</span><span class=\"token constant\">N2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sub</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">N2</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token operator\">-</span><span class=\"token constant\">N2</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">N</span> <span class=\"token operator\">-</span> <span class=\"token constant\">N2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mul</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">N2</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token operator\">*</span><span class=\"token constant\">N2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">div</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">N2</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">N</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token operator\">/</span><span class=\"token constant\">N2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">strN</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> count</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">+=</span> <span class=\"token string\">''</span><span class=\"token operator\">+</span><span class=\"token constant\">N</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pushItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">number<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> dup<span class=\"token punctuation\">,</span> list</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dup<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dup<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> number<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> dup <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">N</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token constant\">N</span> <span class=\"token operator\">></span> <span class=\"token number\">9</span> <span class=\"token operator\">||</span> number <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> number <span class=\"token operator\">></span> <span class=\"token number\">32000</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> middle <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pushItem</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span> <span class=\"token function\">strN</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dup<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            answer <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> middle <span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">kItem</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">const</span> tempItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">div</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> kItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> kItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> kItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> kItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> tempItems<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tempItem</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pushItem</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span> tempItem<span class=\"token punctuation\">,</span> dup<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            answer <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>answer <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>answer <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>정리</strong>: 처음 문제를 풀었을 때 <strong>pushItem</strong>함수를 따로 빼지 않고 같은 코드를 많이 사용하였다.\n추가로, 문제에 <strong>사칙연산</strong>이라는 조건이 있었지만, 뺄셈(-)을 활용하지 않아서 계속 오답이 나왔었다.\n알고리즘을 풀 때, 문제를 푸는 것도 중요하지만, 문제 자체를 이해하는 것도 중요하다.</p>","id":"3ae62bf4-ed84-5a80-b191-f666b751d002","frontmatter":{"title":"[프로그래머스 - 동적 계획법] N으로 표현","date":"July 13, 2019","tags":["algorithm","javascript"]},"fields":{"slug":"/Algorithm/programmers_30_42895/"}}},{"node":{"excerpt":"출처: 프로그래머스 124나라의 숫자처음 문제를 보았을 때 규칙을 찾기 힘들었다.\n1, 2, 4 3가지의 숫자만을 사용하기 때문에 무작정 3으로 나눠보았다.\n나눈 결과 나머지 값이 1, 2, 0으로 규칙적인 것을 볼 수 있었다.\n즉, 4, 1,…","html":"<p><br>\n출처: <a href=\"https://programmers.co.kr/learn/courses/30/lessons/12899?language=javascript\">프로그래머스 124나라의 숫자</a></p>\n<p>처음 문제를 보았을 때 규칙을 찾기 힘들었다.\n1, 2, 4 3가지의 숫자만을 사용하기 때문에 무작정 3으로 나눠보았다.\n나눈 결과 나머지 값이 1, 2, 0으로 규칙적인 것을 볼 수 있었다.\n즉, [4, 1, 2]라는 배열을 만들어 사용하면 편할 것으로 생각하였다.\n각각의 나머지 값을 배열의 인덱스에 대입하여 값을 구하도록 한다.</p>\n<p>몫의 값이 1 이상일 경우, 다시 몫에 저장하여 나머지 값을 구하는 것을 반복하도록 한다.\n만약, 나머지 값이 0일 경우, 몫의 값에서 1을 빼주어 몫에 저장하도록 한다.</p>\n<p>코드로 확인해보도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 몫의 값이 0이 될때까지 반복하도록한다.</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 숫자의 몫의 값을 구한다.</span>\n        <span class=\"token keyword\">let</span> moc <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// 나머지값을 구한다.</span>\n        <span class=\"token keyword\">const</span> namuge <span class=\"token operator\">=</span> n <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">/*\n            몫의 값을 n에 저장하도록 한다.\n            만약, 나머지값이 0이면 때문에 몫의값에서 1을 뺀 숫자를 저장한다.\n        */</span>\n        n <span class=\"token operator\">=</span> namuge <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> moc <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> moc<span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// 나머지값을 결과값을 저장하도록한다.</span>\n        answer <span class=\"token operator\">+=</span> list<span class=\"token punctuation\">[</span>namuge<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 저장된 문자열을 reverse시켜주도록한다.</span>\n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>정리</strong>: 쉬운 문제였지만 규칙을 찾는데 많은 시간이 걸렸다. 만약 바로 코딩테스트에서 이러한 문제가 나왔다면 많은 시간을 소모하였을 것으로 생각한다.</p>","id":"f3046218-a977-5410-860d-d69fec830e2a","frontmatter":{"title":"[프로그래머스 - 연습문제] 124나라의 숫자","date":"July 09, 2019","tags":["algorithm","javascript"]},"fields":{"slug":"/Algorithm/programmers_30_12899/"}}},{"node":{"excerpt":"출처: 프로그래머스 다리를 지나는 트럭먼저 문제는 스택과 큐를 활용한 알고리즘 문제이다.\n다음과 같은 정보를 알고 가야 한다.스택: LIFO큐: FIFO먼저 다리위르 지나고있는 트럭을 저장할 변수 moving를 만들어보자.다리위를 지나고있는 트럭 moving과, 대기중인 트럭 truck_weights…","html":"<p><br>\n출처: <a href=\"https://programmers.co.kr/learn/courses/30/lessons/42583?language=javascript\">프로그래머스 다리를 지나는 트럭</a></p>\n<p>먼저 문제는 스택과 큐를 활용한 알고리즘 문제이다.\n다음과 같은 정보를 알고 가야 한다.</p>\n<ul>\n<li>스택: LIFO</li>\n<li>큐: FIFO</li>\n</ul>\n<p>먼저 다리위르 지나고있는 트럭을 저장할 변수 <strong>moving</strong>를 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bridge_length<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> truck_weights</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> moving <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다리위를 지나고있는 트럭 <strong>moving</strong>과, 대기중인 트럭 <strong>truck_weights</strong>가 모두 없어질때까지 반복문을 돌리도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bridge_length<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> truck_weights</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 이동중인 트럭 리스트</span>\n    <span class=\"token keyword\">let</span> moving <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>truck_weights<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> moving<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음으로 반복문을 실행할 경우 1초가 지나도록 설정해주며, 다리위를 지나고있는 트럭들의 무게를 저장하는 변수를 선언해주도록 하자</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bridge_length<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> truck_weights</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 이동중인 트럭 리스트</span>\n    <span class=\"token keyword\">let</span> moving <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>truck_weights<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> moving<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 반복문을 한번 실행할때마다 1초가 지나도록</span>\n        answer<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// 이동중인 트럭들의 무게 합</span>\n        <span class=\"token keyword\">let</span> truckWeightSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이동중인 트럭들의 전체 무게와, 다음 트럭의 무게의 합이 최대 중량(weight) 보다 작을경우 트럭을 이동중인 리스트에 넣으며 대기중인 트럭 리스트에서 빼도록 해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bridge_length<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> truck_weights</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 이동중인 트럭 리스트</span>\n    <span class=\"token keyword\">let</span> moving <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>truck_weights<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> moving<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 반복문을 한번 실행할때마다 1초가 지나도록</span>\n        answer<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// 이동중인 트럭들의 무게 합</span>\n        <span class=\"token keyword\">let</span> truckWeightSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 이동중인 트럭들의 무게 합과, 대기중인 첫번째 트럭의 무게합이 최대중량인 weight보다 작을경우 이동중인 트럭 리스트에 넣어주도록 한다.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>truckWeightSum <span class=\"token operator\">+</span> truck_weights<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           moving<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n               weight<span class=\"token punctuation\">:</span> truck_weights<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n               move<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>마지막으로 이동중인 트럭의 무게합과, 이동중인 트럭들의 현황을 업데이트해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bridge_length<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> truck_weights</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 이동중인 트럭 리스트</span>\n    <span class=\"token keyword\">let</span> moving <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>truck_weights<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> moving<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 반복문을 한번 실행할때마다 1초가 지나도록</span>\n        answer<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// 이동중인 트럭들의 무게 합</span>\n        <span class=\"token keyword\">let</span> truckWeightSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        moving <span class=\"token operator\">=</span> moving<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 이동중인 트럭의 이동현황 업데이트(1초당 1칸)</span>\n            item<span class=\"token punctuation\">.</span>move<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 다리를 지나는 중인 트럭들</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>move <span class=\"token operator\">&lt;=</span> bridge_length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            \tarr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 이동중인 트럭의 총 합</span>\n                truckWeightSum <span class=\"token operator\">+=</span> item<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 이동중인 트럭들의 무게 합과, 대기중인 첫번째 트럭의 무게합이 최대중량인 weight보다 작을경우 이동중인 트럭 리스트에 넣어주도록 한다.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>truckWeightSum <span class=\"token operator\">+</span> truck_weights<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 이동중인 트럭리스트에 트럭을 넣어주는 동시에, 대기중인 트럭 리스트에서 트럭을 빼도록 한다.</span>\n            moving<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                weight<span class=\"token punctuation\">:</span> truck_weights<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                move<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>정리</strong>:큐와 스택관련 문제를 처음 접해서인지 어려웠다.<br>\n큐와 스택에 대하여 확실히 알게되는 계기를 마련하였다.</p>","id":"3ad0ee16-43ac-5d13-b52f-c2e009105330","frontmatter":{"title":"[프로그래머스 - 스택/큐] 다리를 지나는 트럭","date":"July 09, 2019","tags":["algorithm","javascript"]},"fields":{"slug":"/Algorithm/programmers_30_42583/"}}},{"node":{"excerpt":"…","html":"<p><br>\n출처: <a href=\"https://programmers.co.kr/learn/courses/30/lessons/43104?language=javascript\">프로그래머스 타일 장식물</a></p>\n<p>문제의 종류는 동적 계획법이다.<br>\n하지만 이제 알고리즘을 시작하는 단계라 동적 계획법을 사용하는 방법을 모르고 있다.<br>\n따라서 내가 생각한 방식대로 문제를 풀어보도록 한다.<br>\n먼저 <a href=\"https://devpil.github.io/Algorithm/recursion/\">이전 게시물</a>에 피보나치 수열에 대하여 포스팅한 적이 있다. 이를 통하여 문제를 풀어보도록 하자.  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">N</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">[</span><span class=\"token constant\">N</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>먼저 직사각형 둘레의 길이는 <code class=\"language-text\">(가로 + 세로) * 2</code>이다.<br>\n위의 공식을 피보나치 수열에 적용하게 된다면<code class=\"language-text\">(가로(N번째 + N-1번째) + 세로(N-1번째 + N-2번째))*2</code>가 된다.<br>\n따라서 위와 같이 값을 리턴해주도록 한다.  </p>\n<p>문제를 풀다 보니, 피보나치 수열을 꼭 재귀함수를 이용해 풀 이유가 없다고 생각이 들었다.<br>\n따라서 다음과 같이 문제를 바꿔서 풀어보도록 하자.<br>\n재귀함수 부분을 단순 반복문으로 바꿔보았다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>훨씬 간결한 코드가 완성되었다.</p>\n<p><strong>정리</strong>: <strong>return</strong>값을 <strong>(list[N] + list[N-1] + list[N-1] + list[N-2]) * 2</strong>로 할경우, 효율성부분에서 실패하는 것을 볼 수 있었다. 하지만 <strong>(list[N] + list[N-1]) * 2 + list[N-1] + list[N-2])*2</strong>로 할경우 통과하는 것을 볼 수 있었다. 각각 연산을 한 후 더해주는 것 보다. 다 더한 후 한 번에 곱셈연산을 할 경우, 시간복잡도가 더 증가하는 것 같았다. 시간복잡도를 확인하는 부분이 아직 익숙하지가 않다. 조금 더 연습이 필요하다.</p>","id":"94c75232-960d-5f37-896a-662abfe959f8","frontmatter":{"title":"[프로그래머스 - 동적 계획법] 타일 장식물","date":"July 09, 2019","tags":["algorithm","javascript"]},"fields":{"slug":"/Algorithm/programmers_30_4104/"}}},{"node":{"excerpt":"최초 실행git-flow 설치 : apt-get install git-flownode -프로젝트 복사 : git clonebranch 설정 세팅: git flow init (master 입력 후, 끝날 때까지 엔터)브랜치 연결 : git branch -u origin/develop모든 파일이 mofified 일때 : git checkout…","html":"<ul>\n<li>\n<p>최초 실행</p>\n<ul>\n<li>git-flow 설치 : apt-get install git-flownode -</li>\n<li>프로젝트 복사 : git clone</li>\n<li>branch 설정 세팅: git flow init (master 입력 후, 끝날 때까지 엔터)</li>\n<li>브랜치 연결 : git branch -u origin/develop</li>\n<li>모든 파일이 mofified 일때 : git checkout -- .</li>\n</ul>\n</li>\n<li>\n<p>feature </p>\n<ul>\n<li>\n<p>가) 최신 버전 풀</p>\n<ol>\n<li>git checkout develop</li>\n<li>git pull origin develop</li>\n</ol>\n</li>\n<li>\n<p>나) 브랜치 생성 - 테스크 작업 시작할때</p>\n<ol>\n<li>git flow feature start -F [브런치이름]</li>\n</ol>\n</li>\n<li>\n<p>다) 브랜치 이동 - 작업중 다른 테스크로 이동</p>\n<ol>\n<li>브런치 아이디 확인 : git branch</li>\n<li>git checkout [브런치이름]</li>\n</ol>\n</li>\n<li>\n<p>라) 작업 완료시 - publish</p>\n<ol>\n<li>git flow feature publish [브런치이름]</li>\n</ol>\n</li>\n<li>\n<p>마) 로컬 브랜치 삭제</p>\n<ol>\n<li>git branch feature/[브런치이름] -D</li>\n</ol>\n</li>\n<li>\n<p>바) 오리진에 있는 다른 브랜치를 딸때\ngit checkout -t origin/[브런치이름] : 원격 저장소의 브랜치를 가져온다.<br>\n에러가 날 경우, git fetch 를 실행하여 원격 저장소의 브랜치 리스트를 업데이트 한다.  </p>\n</li>\n<li>\n<p>사) 로컬 브랜치에있는 브랜치를 복사 할때<br>\n복사할 대상 브랜치로 checkout 후<br>\ngit checkout -b [브런치이름]</p>\n</li>\n<li>\n<p>아) 작업 완료 후 - push\ngit push origin [브런치이름]</p>\n</li>\n</ul>\n</li>\n<li>\n<p>릴리즈</p>\n<ul>\n<li>\n<p>가) 로컬에 릴리즈 브랜치와 같은이름의 브랜치 생성 및 이동</p>\n<ol>\n<li>git branch [릴리즈 브랜치 이름]</li>\n<li>git checkout[릴리즈 브랜치 이름]</li>\n</ol>\n</li>\n<li>\n<p>나) 원격에서 로컬로 pull</p>\n<ol>\n<li>git pull origin [릴리즈 브랜치 이름]</li>\n</ol>\n</li>\n<li>\n<p>다) 작업 완료후 커밋 -> 푸시</p>\n<ol>\n<li>git commit -a -m “[comment]”</li>\n<li>git push origin [릴리즈 브랜치 이름]</li>\n</ol>\n</li>\n<li>\n<p>핫픽스</p>\n<ul>\n<li>\n<p>가) 마스터 브랜치로 이동</p>\n<ol>\n<li>git checkout master</li>\n</ol>\n</li>\n<li>\n<p>가) 브랜치 시작</p>\n<ol>\n<li>git flow hotfix start -F [브런치이름]</li>\n</ol>\n</li>\n<li>\n<p>나) 수정하고 바로 배포</p>\n<ol>\n<li>git flow hotfix finish -Fp [브런치이름]</li>\n</ol>\n</li>\n<li>\n<p>다) 태그, 코멘트 메세지 입력</p>\n<ol>\n<li>입력후 :wq</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>에러</p>\n<ul>\n<li>\n<p>가) branch ‘develop’ may be fast-forwarded.</p>\n<ul>\n<li>git checkout develop &#x26;&#x26; git pull origin</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>\n<p>commit 취소</p>\n<ul>\n<li>git reset HEAD^ : 최종 커밋을 취소. 워킹트리는 보존됨. (커밋은 했으나 push하지 않은 경우 유용)</li>\n<li>git reset HEAD~2 : 마지막 2개의 커밋을 취소. 워킹트리는 보존됨.</li>\n<li>git reset --hard HEAD~2 : 마지막 2개의 커밋을 취소. index 및 워킹트리 모두 원복됨.</li>\n<li>git reset --hard ORIG_HEAD : 머지한 것을 이미 커밋했을 때,  그 커밋을 취소. (잘못된 머지를 이미 커밋한 경우 유용)</li>\n<li>git revert HEAD : HEAD에서 변경한 내역을 취소하는 새로운 커밋 발행(undo commit). (커밋을 이미 push 해버린 경우 유용)</li>\n</ul>\n</li>\n</ul>","id":"cc22b3d1-6656-594c-92bc-c62333ea1cc4","frontmatter":{"title":"Git 사용 명령어 정리","date":"July 08, 2019","tags":["git"]},"fields":{"slug":"/Github/myDocGit/"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}