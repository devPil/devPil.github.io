{"data":{"site":{"siteMetadata":{"title":"Pil Developer Diary","author":"LEE PIL JU","labels":[{"tag":"algorithm","tech":"Algorithm","name":"DiCode","size":20,"color":"deepskyblue"},{"tag":"react","tech":"React","name":"DiReact","size":20,"color":"deepskyblue"},{"tag":"nodejs","tech":"Node.js","name":"DiNodejsSmall","size":20,"color":"lightgreen"},{"tag":"git","tech":"Git","name":"DiGitMerge","size":20,"color":"white"},{"tag":"javascript","tech":"JavaScript","name":"DiJsBadge","size":20,"color":"yellow"},{"tag":"css","tech":"CSS","name":"DiCss3Full","size":20,"color":"teal"},{"tag":"python","tech":"Python","name":"DiPython","size":20,"color":"deepskyblue"},{"tag":"ruby","tech":"Ruby","name":"DiRuby","size":20,"color":"crimson"},{"tag":"java","tech":"Java","name":"FaJava","size":20,"color":"wheat"},{"tag":"angular","tech":"Angular","name":"DiAngularSimple","size":20,"color":"red"},{"tag":"html","tech":"HTML","name":"FaHtml5","size":20,"color":"darkorange"},{"tag":"php","tech":"php","name":"DiPhp","size":20,"color":"violet"},{"tag":"mongodb","tech":"MongoDB","name":"DiMongodb","size":20,"color":"green"},{"tag":"vscode","tech":"VS Code","name":"DiVisualstudio","size":20,"color":"deepskyblue"}]}},"allMarkdownRemark":{"totalCount":3,"edges":[{"node":{"excerpt":"출처: 프로그래머스 124나라의 숫자처음 문제를 보았을 때 규칙을 찾기 힘들었다.\n1, 2, 4 3가지의 숫자만을 사용하기 때문에 무작정 3으로 나눠보았다.\n나눈 결과 나머지 값이 1, 2, 0으로 규칙적인 것을 볼 수 있었다.\n즉, 4, 1,…","html":"<p>출처: <a href=\"https://programmers.co.kr/learn/courses/30/lessons/12899?language=javascript\">프로그래머스 124나라의 숫자</a></p>\n<p>처음 문제를 보았을 때 규칙을 찾기 힘들었다.\n1, 2, 4 3가지의 숫자만을 사용하기 때문에 무작정 3으로 나눠보았다.\n나눈 결과 나머지 값이 1, 2, 0으로 규칙적인 것을 볼 수 있었다.\n즉, [4, 1, 2]라는 배열을 만들어 사용하면 편할 것으로 생각하였다.\n각각의 나머지 값을 배열의 인덱스에 대입하여 값을 구하도록 한다.</p>\n<p>몫의 값이 1 이상일 경우, 다시 몫에 저장하여 나머지 값을 구하는 것을 반복하도록 한다.\n만약, 나머지 값이 0일 경우, 몫의 값에서 1을 빼주어 몫에 저장하도록 한다.</p>\n<p>코드로 확인해보도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function solution(n) {\n    const list = [&#39;4&#39;, &#39;1&#39;, &#39;2&#39;];\n    let answer = &#39;&#39;;\n    // 몫의 값이 0이 될때까지 반복하도록한다.\n    while(n !== 0) {\n        // 숫자의 몫의 값을 구한다.\n        let moc = parseInt(n / 3); \n        // 나머지값을 구한다.\n        const namuge = n % 3; \n        /*\n            몫의 값을 n에 저장하도록 한다.\n            만약, 나머지값이 0이면 때문에 몫의값에서 1을 뺀 숫자를 저장한다.\n        */\n        n = namuge === 0 ? moc - 1 : moc; \n        // 나머지값을 결과값을 저장하도록한다.\n        answer += list[namuge]\n    }\n    // 저장된 문자열을 reverse시켜주도록한다.\n    return answer.split(&quot;&quot;).reverse().join(&quot;&quot;); \n}</code></pre></div>\n<p><strong>정리</strong>: 쉬운 문제였지만 규칙을 찾는데 많은 시간이 걸렸다. 만약 바로 코딩테스트에서 이러한 문제가 나왔다면 많은 시간을 소모하였을 것으로 생각한다.</p>","id":"f3046218-a977-5410-860d-d69fec830e2a","frontmatter":{"title":"[프로그래머스 - 연습문제] 124나라의 숫자","date":"July, 2019","tags":["algorithm","javascript"]},"fields":{"slug":"/Algorithm/programmers_30_12899/"}}},{"node":{"excerpt":"…","html":"<p><br>\n출처: <a href=\"https://programmers.co.kr/learn/courses/30/lessons/43104?language=javascript\">프로그래머스 타일 장식물</a></p>\n<p>문제의 종류는 동적 계획법이다.<br>\n하지만 이제 알고리즘을 시작하는 단계라 동적 계획법을 사용하는 방법을 모르고 있다.<br>\n따라서 내가 생각한 방식대로 문제를 풀어보도록 한다.<br>\n먼저 <a href=\"https://devpil.github.io/Algorithm/recursion/\">이전 게시물</a>에 피보나치 수열에 대하여 포스팅한 적이 있다. 이를 통하여 문제를 풀어보도록 하자.  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function fibonacci(N, list) {\n    if (N &lt;= 2) return;\n    fibonacci(N - 1, list);\n    list.push(list[N-1] + list[N - 2]);\n}\n\nfunction solution(N) {\n    const list = [0, 1, 1];\n    fibonacci(N, list);\n    return (list[N] + list[N-1]) * 2+ (list[N-1] + list[N-2]) * 2 ;\n}</code></pre></div>\n<p>먼저 직사각형 둘레의 길이는 <code class=\"language-text\">(가로 + 세로) * 2</code>이다.<br>\n위의 공식을 피보나치 수열에 적용하게 된다면<code class=\"language-text\">(가로(N번째 + N-1번째) + 세로(N-1번째 + N-2번째))*2</code>가 된다.<br>\n따라서 위와 같이 값을 리턴해주도록 한다.  </p>\n<p>문제를 풀다 보니, 피보나치 수열을 꼭 재귀함수를 이용해 풀 이유가 없다고 생각이 들었다.<br>\n따라서 다음과 같이 문제를 바꿔서 풀어보도록 하자.<br>\n재귀함수 부분을 단순 반복문으로 바꿔보았다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function solution(N) {\n    const list = [0, 1, 1];\n    for(let i = 3; i &lt;= N; i++) {\n        list.push(list[i - 1] + list[i - 2]);\n    }\n    return (list[N] + list[N-1]) * 2 + (list[N-1] + list[N-2]) * 2;\n}</code></pre></div>\n<p>훨씬 간결한 코드가 완성되었다.</p>\n<p><strong>정리</strong>: <strong>return</strong>값을 <strong>(list[N] + list[N-1] + list[N-1] + list[N-2]) * 2</strong>로 할경우, 효율성부분에서 실패하는 것을 볼 수 있었다. 하지만 <strong>(list[N] + list[N-1]) * 2 + list[N-1] + list[N-2])*2</strong>로 할경우 통과하는 것을 볼 수 있었다. 각각 연산을 한 후 더해주는 것 보다. 다 더한 후 한 번에 곱셈연산을 할 경우, 시간복잡도가 더 증가하는 것 같았다. 시간복잡도를 확인하는 부분이 아직 익숙하지가 않다. 조금 더 연습이 필요하다.</p>","id":"94c75232-960d-5f37-896a-662abfe959f8","frontmatter":{"title":"[프로그래머스 - 동적 계획법] 타일 장식물","date":"July, 2019","tags":["algorithm","javascript"]},"fields":{"slug":"/Algorithm/programmers_30_4104/"}}},{"node":{"excerpt":"재귀란?사전적 정의: 재귀(recursion…","html":"<h3>재귀란?</h3>\n<p>사전적 정의: 재귀(recursion)은 어떠한 것을 정의할 때 자기 자신을 참조하는 것을 뜻한다. <a href=\"https://ko.wikipedia.org/wiki/%EC%9E%AC%EA%B7%80\">위키피디아</a></p>\n<p>알고리즘을 공부할 때, 빠질 수 없는 부분이 재귀함수라고 생각한다.\n알고리즘이 재귀함수를 사용하여 문제를 푸는 경우를 종종 볼 수 있었다.\n지금까지 재귀함수란 특정 함수 내에서 동일 함수를 반복하여 호출하는 것이라고만 알고 있었다.</p>\n<p>하지만 직접 재귀함수를 호출을 하라고 하면 못하는 경우가 많이 있었다.\n따라서 오늘은 재귀함수를 사용해보도록 하자.</p>\n<p>먼저 재귀 함수를 공부하기 위해 간단한 3가지의 문제를 구현해보도록 하자.  </p>\n<p><strong>1. N펙토리얼을 구하라</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function factorial(n) {\n    if (n === 1) {\n        return n;\n    }\n    return n * factorial(n - 1);\n}\nconsole.log(factorial(3));</code></pre></div>\n<p>위와 같이, 재귀함수를 사용할 경우, 반드시 종료조건을 설정해줘야 한다.\n만약 종료조건을 설정해 주지 않는다면 무한루프에 빠져 함수가 영원히 종료되지 않는다.  </p>\n<p><strong>2. X의 N제곱 수를 구하라</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function pow(n, x) {\n    if (n === 1) {\n        return x;\n    }\n    return pow(n-1, x) * x; \n}\nconsole.log(pow(3, 3));</code></pre></div>\n<p>문제1 과 같이 쉽게 구현 할 수 있었다.  </p>\n<p><strong>3. N번째 피보나치수를 구하라</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function fibonacci(n, sum = 1) {\n    if (n &lt;= 2) return sum;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\nconsole.log(fibonacci(1));\nconsole.log(fibonacci(2));\nconsole.log(fibonacci(3));\nconsole.log(fibonacci(4));\nconsole.log(fibonacci(5));</code></pre></div>\n<p>피보나치 수의 경우, <code class=\"language-text\">N번째 수 = N-1번째수 + N-2번째 수</code> 이다.\n위와 같이 코드를 작성하였을 경우, 정상적으로 출력되는 것을 볼 수 있다.\n하지만 n=50 정도만 되어도 상당히 느리게 동작하는 것을 볼 수 있다.</p>\n<p>따라서 위의 코드를 다음과 같이 변환하여 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const list = [0, 1, 1]; // n번째 수를 저장하는 배열\nfunction fibonacci(n) {\n    if (n &lt;= 2) return;\n    fibonacci(n-1);\n    list.push(list[n - 1] + list[n - 2]; ); // n번째 수를 계산하여 list의 n번째에 넣도록 한다.\n}\n\nconst n = 30;\nfibonacci(n);\nconsole.log(list[n]); // 리스트에 들어있는 n번째 수를 출력하도록 한다.</code></pre></div>\n<p>위와 같이 재귀함수에서 다른 동일 함수를 한 번만 호출하도록 변경하였을 경우, 더 빠른 속도로 결괏값을 낼 수 있는 경우를 볼 수 있다. </p>\n<p><strong>정리</strong>: 재귀함수를 사용하는 방법은 여러 가지의 방법이 있지만, 잘못 사용할 경우 프로그램의 성능에 크게 타격을 주게 된다. 재귀함수를 사용할때 최적의 속도록 활용할 수 있는 방법이 중요하다.</p>","id":"88e21698-0a1f-5183-9d16-562006f03e86","frontmatter":{"title":"Recursion(재귀)","date":"July, 2019","tags":["algorithm","javascript"]},"fields":{"slug":"/Algorithm/recursion/"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tag":"javascript"}}