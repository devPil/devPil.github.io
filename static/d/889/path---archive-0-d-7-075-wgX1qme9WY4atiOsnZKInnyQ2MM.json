{"data":{"site":{"siteMetadata":{"title":"Pil Developer Diary","author":"LEE PIL JU","labels":[{"tag":"algorithm","tech":"Algorithm","name":"DiReact","size":20,"color":"deepskyblue"},{"tag":"react","tech":"React","name":"DiReact","size":20,"color":"deepskyblue"},{"tag":"nodejs","tech":"Node.js","name":"DiNodejsSmall","size":20,"color":"lightgreen"},{"tag":"git","tech":"Git","name":"DiGitMerge","size":20,"color":"white"},{"tag":"javascript","tech":"JavaScript","name":"DiJsBadge","size":20,"color":"yellow"},{"tag":"css","tech":"CSS","name":"DiCss3Full","size":20,"color":"teal"},{"tag":"python","tech":"Python","name":"DiPython","size":20,"color":"deepskyblue"},{"tag":"ruby","tech":"Ruby","name":"DiRuby","size":20,"color":"crimson"},{"tag":"java","tech":"Java","name":"FaJava","size":20,"color":"wheat"},{"tag":"angular","tech":"Angular","name":"DiAngularSimple","size":20,"color":"red"},{"tag":"html","tech":"HTML","name":"FaHtml5","size":20,"color":"darkorange"},{"tag":"php","tech":"php","name":"DiPhp","size":20,"color":"violet"},{"tag":"mongodb","tech":"MongoDB","name":"DiMongodb","size":20,"color":"green"},{"tag":"vscode","tech":"VS Code","name":"DiVisualstudio","size":20,"color":"deepskyblue"}]}},"allMarkdownRemark":{"totalCount":2,"edges":[{"node":{"excerpt":"최초 실행git-flow 설치 : apt-get install git-flownode -프로젝트 복사 : git clonebranch 설정 세팅: git flow init (master 입력 후, 끝날 때까지 엔터)브랜치 연결 : git branch -u origin/develop모든 파일이 mofified 일때 : git checkout…","html":"<ul>\n<li>\n<p>최초 실행</p>\n<ul>\n<li>git-flow 설치 : apt-get install git-flownode -</li>\n<li>프로젝트 복사 : git clone</li>\n<li>branch 설정 세팅: git flow init (master 입력 후, 끝날 때까지 엔터)</li>\n<li>브랜치 연결 : git branch -u origin/develop</li>\n<li>모든 파일이 mofified 일때 : git checkout -- .</li>\n</ul>\n</li>\n<li>\n<p>feature </p>\n<ul>\n<li>\n<p>가) 최신 버전 풀</p>\n<ol>\n<li>git checkout develop</li>\n<li>git pull origin develop</li>\n</ol>\n</li>\n<li>\n<p>나) 브랜치 생성 - 테스크 작업 시작할때</p>\n<ol>\n<li>git flow feature start -F [브런치이름]</li>\n</ol>\n</li>\n<li>\n<p>다) 브랜치 이동 - 작업중 다른 테스크로 이동</p>\n<ol>\n<li>브런치 아이디 확인 : git branch</li>\n<li>git checkout [브런치이름]</li>\n</ol>\n</li>\n<li>\n<p>라) 작업 완료시 - publish</p>\n<ol>\n<li>git flow feature publish [브런치이름]</li>\n</ol>\n</li>\n<li>\n<p>마) 로컬 브랜치 삭제</p>\n<ol>\n<li>git branch feature/[브런치이름] -D</li>\n</ol>\n</li>\n<li>\n<p>바) 오리진에 있는 다른 브랜치를 딸때\ngit checkout -t origin/[브런치이름] : 원격 저장소의 브랜치를 가져온다.<br>\n에러가 날 경우, git fetch 를 실행하여 원격 저장소의 브랜치 리스트를 업데이트 한다.  </p>\n</li>\n<li>\n<p>사) 로컬 브랜치에있는 브랜치를 복사 할때<br>\n복사할 대상 브랜치로 checkout 후<br>\ngit checkout -b [브런치이름]</p>\n</li>\n<li>\n<p>아) 작업 완료 후 - push\ngit push origin [브런치이름]</p>\n</li>\n</ul>\n</li>\n<li>\n<p>릴리즈</p>\n<ul>\n<li>\n<p>가) 로컬에 릴리즈 브랜치와 같은이름의 브랜치 생성 및 이동</p>\n<ol>\n<li>git branch [릴리즈 브랜치 이름]</li>\n<li>git checkout[릴리즈 브랜치 이름]</li>\n</ol>\n</li>\n<li>\n<p>나) 원격에서 로컬로 pull</p>\n<ol>\n<li>git pull origin [릴리즈 브랜치 이름]</li>\n</ol>\n</li>\n<li>\n<p>다) 작업 완료후 커밋 -> 푸시</p>\n<ol>\n<li>git commit -a -m “[comment]”</li>\n<li>git push origin [릴리즈 브랜치 이름]</li>\n</ol>\n</li>\n<li>\n<p>핫픽스</p>\n<ul>\n<li>\n<p>가) 마스터 브랜치로 이동</p>\n<ol>\n<li>git checkout master</li>\n</ol>\n</li>\n<li>\n<p>가) 브랜치 시작</p>\n<ol>\n<li>git flow hotfix start -F [브런치이름]</li>\n</ol>\n</li>\n<li>\n<p>나) 수정하고 바로 배포</p>\n<ol>\n<li>git flow hotfix finish -Fp [브런치이름]</li>\n</ol>\n</li>\n<li>\n<p>다) 태그, 코멘트 메세지 입력</p>\n<ol>\n<li>입력후 :wq</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>에러</p>\n<ul>\n<li>\n<p>가) branch ‘develop’ may be fast-forwarded.</p>\n<ul>\n<li>git checkout develop &#x26;&#x26; git pull origin</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>\n<p>commit 취소</p>\n<ul>\n<li>git reset HEAD^ : 최종 커밋을 취소. 워킹트리는 보존됨. (커밋은 했으나 push하지 않은 경우 유용)</li>\n<li>git reset HEAD~2 : 마지막 2개의 커밋을 취소. 워킹트리는 보존됨.</li>\n<li>git reset --hard HEAD~2 : 마지막 2개의 커밋을 취소. index 및 워킹트리 모두 원복됨.</li>\n<li>git reset --hard ORIG_HEAD : 머지한 것을 이미 커밋했을 때,  그 커밋을 취소. (잘못된 머지를 이미 커밋한 경우 유용)</li>\n<li>git revert HEAD : HEAD에서 변경한 내역을 취소하는 새로운 커밋 발행(undo commit). (커밋을 이미 push 해버린 경우 유용)</li>\n</ul>\n</li>\n</ul>","id":"cc22b3d1-6656-594c-92bc-c62333ea1cc4","frontmatter":{"title":"Git 사용 명령어 정리","date":"July 08, 2019","tags":["git"]},"fields":{"slug":"/Github/myDocGit/"}}},{"node":{"excerpt":"재귀란?사전적 정의: 재귀(recursion…","html":"<h3>재귀란?</h3>\n<p>사전적 정의: 재귀(recursion)은 어떠한 것을 정의할 때 자기 자신을 참조하는 것을 뜻한다. <a href=\"https://ko.wikipedia.org/wiki/%EC%9E%AC%EA%B7%80\">위키피디아</a></p>\n<p>알고리즘을 공부할 때, 빠질 수 없는 부분이 재귀함수라고 생각한다.\n알고리즘이 재귀함수를 사용하여 문제를 푸는 경우를 종종 볼 수 있었다.\n지금까지 재귀함수란 특정 함수 내에서 동일 함수를 반복하여 호출하는 것이라고만 알고 있었다.</p>\n<p>하지만 직접 재귀함수를 호출을 하라고 하면 못하는 경우가 많이 있었다.\n따라서 오늘은 재귀함수를 사용해보도록 하자.</p>\n<p>먼저 재귀 함수를 공부하기 위해 간단한 3가지의 문제를 구현해보도록 하자.</p>\n<ol>\n<li>\n<p><code class=\"language-text\">N펙토리얼을 구하라</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function factorial(n) {\nif (n === 1) {\n    return n;\n}\nreturn n * factorial(n - 1);\n}\nconsole.log(factorial(3));</code></pre></div>\n</li>\n</ol>\n<p>위와 같이, 재귀함수를 사용 할 경우, 반드시 종료조건을 설정해 줘야한다.\n만약 종료조건을 설정해 주지 않는다면 무한루프에 빠져 함수가 영원히 종료되지 않는다.</p>\n<ol start=\"2\">\n<li>\n<p><code class=\"language-text\">X의 N제곱 수를 구하라</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function pow(n, x) {\nconsole.log(`n: ${n}, x: ${x}`);\nif (n === 1) {\n    return x;\n}\nreturn pow(n-1, x) * x; \n}\nconsole.log(pow(3, 3));</code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">N번째 피보나치수를 구하라</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function fibonacci(n, sum = 1) {\nif (n &lt;= 2) return sum;\nreturn fibonacci(n - 1) + fibonacci(n - 2);\n}\nconsole.log(fibonacci(1));\nconsole.log(fibonacci(2));\nconsole.log(fibonacci(3));\nconsole.log(fibonacci(4));\nconsole.log(fibonacci(5));</code></pre></div>\n</li>\n</ol>\n<p>피보나치수의 경우,\n<code class=\"language-text\">N번째 수 = N-1번째수 + N-2번째 수</code> 이다.\n위와 같이 코드를 작성 하였을 경우, 정상적으로 출력이 되는 것을 볼 수 있다.\n하지만, n=100000 정도 된다면? 문제가 생길 가능성이 크다.</p>\n<p>따라서 위의 코드를 다음과 같이 변환하여 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const list = [0, 1, 1];\nfunction fibonacci(n) {\n    if (n &lt;= 2) return;\n    fibonacci(n-1);\n    const sum = list[n - 1] + list[n - 2];\n    list.push(sum);\n}\n\nconst n = 100;\nfibonacci(n);\nconsole.log(list[n]);</code></pre></div>","id":"88e21698-0a1f-5183-9d16-562006f03e86","frontmatter":{"title":"Recursion(재귀)","date":"July 08, 2019","tags":["algorithm"]},"fields":{"slug":"/Algorithm/recursion/"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}