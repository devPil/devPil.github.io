{"data":{"site":{"siteMetadata":{"title":"Pil Developer Diary","author":"LEE PIL JU","labels":[{"tag":"algorithm","tech":"Algorithm","name":"DiJsBadge","size":20,"color":"deepskyblue"},{"tag":"react","tech":"React","name":"DiReact","size":20,"color":"deepskyblue"},{"tag":"nodejs","tech":"Node.js","name":"DiNodejsSmall","size":20,"color":"lightgreen"},{"tag":"git","tech":"Git","name":"DiGitMerge","size":20,"color":"white"},{"tag":"javascript","tech":"JavaScript","name":"DiJsBadge","size":20,"color":"yellow"},{"tag":"css","tech":"CSS","name":"DiCss3Full","size":20,"color":"teal"},{"tag":"python","tech":"Python","name":"DiPython","size":20,"color":"deepskyblue"},{"tag":"ruby","tech":"Ruby","name":"DiRuby","size":20,"color":"crimson"},{"tag":"java","tech":"Java","name":"FaJava","size":20,"color":"wheat"},{"tag":"angular","tech":"Angular","name":"DiAngularSimple","size":20,"color":"red"},{"tag":"html","tech":"HTML","name":"FaHtml5","size":20,"color":"darkorange"},{"tag":"php","tech":"php","name":"DiPhp","size":20,"color":"violet"},{"tag":"mongodb","tech":"MongoDB","name":"DiMongodb","size":20,"color":"green"},{"tag":"vscode","tech":"VS Code","name":"DiVisualstudio","size":20,"color":"deepskyblue"}]}},"allMarkdownRemark":{"totalCount":2,"edges":[{"node":{"excerpt":"","html":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">대구 달성공원에 놀러 온 지수는 최근에 새로 만든 타일 장식물을 보게 되었다. 타일 장식물은 정사각형 타일을 붙여 만든 형태였는데, 한 변이 1인 정사각형 타일부터 시작하여 마치 앵무조개의 나선 모양처럼 점점 큰 타일을 붙인 형태였다. 타일 장식물의 일부를 그리면 다음과 같다.\n![이미지](https://grepp-programmers.s3.amazonaws.com/files/production/3e31bedd54/fcc48066-e72f-45c8-af03-e4360b58b589.png)\n그림에서 타일에 적힌 수는 각 타일의 한 변의 길이를 나타낸다. 타일 장식물을 구성하는 정사각형 타일 한 변의 길이를 안쪽 타일부터 시작하여 차례로 적으면 다음과 같다.\n[1, 1, 2, 3, 5, 8, .]\n지수는 문득 이러한 타일들로 구성되는 큰 직사각형의 둘레가 궁금해졌다. 예를 들어, 처음 다섯 개의 타일이 구성하는 직사각형(위에서 빨간색으로 표시한 직사각형)의 둘레는 26이다.\n\n타일의 개수 N이 주어질 때, N개의 타일로 구성된 직사각형의 둘레를 return 하도록 solution 함수를 작성하시오.</code></pre></div>","id":"94c75232-960d-5f37-896a-662abfe959f8","frontmatter":{"title":"프로그래머스 동적계획법 타일 장식물","date":"July, 2019","tags":["algorithm"]},"fields":{"slug":"/Algorithm/programmers_30_4104/"}}},{"node":{"excerpt":"재귀란?사전적 정의: 재귀(recursion…","html":"<h3>재귀란?</h3>\n<p>사전적 정의: 재귀(recursion)은 어떠한 것을 정의할 때 자기 자신을 참조하는 것을 뜻한다. <a href=\"https://ko.wikipedia.org/wiki/%EC%9E%AC%EA%B7%80\">위키피디아</a></p>\n<p>알고리즘을 공부할 때, 빠질 수 없는 부분이 재귀함수라고 생각한다.\n알고리즘이 재귀함수를 사용하여 문제를 푸는 경우를 종종 볼 수 있었다.\n지금까지 재귀함수란 특정 함수 내에서 동일 함수를 반복하여 호출하는 것이라고만 알고 있었다.</p>\n<p>하지만 직접 재귀함수를 호출을 하라고 하면 못하는 경우가 많이 있었다.\n따라서 오늘은 재귀함수를 사용해보도록 하자.</p>\n<p>먼저 재귀 함수를 공부하기 위해 간단한 3가지의 문제를 구현해보도록 하자.  </p>\n<p><strong>1. N펙토리얼을 구하라</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function factorial(n) {\n    if (n === 1) {\n        return n;\n    }\n    return n * factorial(n - 1);\n}\nconsole.log(factorial(3));</code></pre></div>\n<p>위와 같이, 재귀함수를 사용할 경우, 반드시 종료조건을 설정해줘야 한다.\n만약 종료조건을 설정해 주지 않는다면 무한루프에 빠져 함수가 영원히 종료되지 않는다.  </p>\n<p><strong>2. X의 N제곱 수를 구하라</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function pow(n, x) {\n    if (n === 1) {\n        return x;\n    }\n    return pow(n-1, x) * x; \n}\nconsole.log(pow(3, 3));</code></pre></div>\n<p>문제1 과 같이 쉽게 구현 할 수 있었다.  </p>\n<p><strong>3. N번째 피보나치수를 구하라</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function fibonacci(n, sum = 1) {\n    if (n &lt;= 2) return sum;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\nconsole.log(fibonacci(1));\nconsole.log(fibonacci(2));\nconsole.log(fibonacci(3));\nconsole.log(fibonacci(4));\nconsole.log(fibonacci(5));</code></pre></div>\n<p>피보나치 수의 경우, <code class=\"language-text\">N번째 수 = N-1번째수 + N-2번째 수</code> 이다.\n위와 같이 코드를 작성하였을 경우, 정상적으로 출력되는 것을 볼 수 있다.\n하지만 n=50 정도만 되어도 상당히 느리게 동작하는 것을 볼 수 있다.</p>\n<p>따라서 위의 코드를 다음과 같이 변환하여 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const list = [0, 1, 1]; // n번째 수를 저장하는 배열\nfunction fibonacci(n) {\n    if (n &lt;= 2) return;\n    fibonacci(n-1);\n    list.push(list[n - 1] + list[n - 2]; ); // n번째 수를 계산하여 list의 n번째에 넣도록 한다.\n}\n\nconst n = 30;\nfibonacci(n);\nconsole.log(list[n]); // 리스트에 들어있는 n번째 수를 출력하도록 한다.</code></pre></div>\n<p>위와 같이 재귀함수에서 다른 동일 함수를 한 번만 호출하도록 변경하였을 경우, 더 빠른 속도로 결괏값을 낼 수 있는 경우를 볼 수 있다. </p>\n<p><strong>정리</strong>: 재귀함수를 사용하는 방법은 여러 가지의 방법이 있지만, 잘못 사용할 경우 프로그램의 성능에 크게 타격을 주게 된다. 재귀함수를 사용할때 최적의 속도록 활용할 수 있는 방법이 중요하다.</p>","id":"88e21698-0a1f-5183-9d16-562006f03e86","frontmatter":{"title":"Recursion(재귀)","date":"July, 2019","tags":["algorithm"]},"fields":{"slug":"/Algorithm/recursion/"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tag":"algorithm"}}